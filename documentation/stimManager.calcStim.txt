% stimManager.calcStim()
% override this method to specify the visual stimulus and correct/incorrect reponses for a trial
% define your stimManager subclass to contain any necessary state
% calcStim output is interpreted by a trialManager, this document describes the interpretation by nAFC, freeDrinks, and their subclasses.
%
% calcStim can return either phased or non-phased outputs, depending on the return value of 'type'
% see below for more detailed description of each return value in both cases
% 
% INPUTS
%   stimulus                this images stimManager object (contains your custom state)
%   trialManagerClass       the trialManager class for the running training step
%   resolutions             struct array of available resolutions
%   displaySize             physical dimensions of the display in mm (see discusion in help for screen('displaysize'))
%   LUTbits                 number of bits in the color look up (gamma/linearization) table
%   responsePorts           vector of available response port indices on the running station (determined by trial manager)
%   totalPorts              total number of available ports on this station (useful for positioning stimuli)
%   trialRecords            a struct array of trialRecords from previous trials (all trials from this session included)
%                           on Nth trial of this session, M-N+1 trials from previous sessions are included
%                           M currently hardcoded in station.doTrials to 100
%                           the last element of trialRecords will the trialRecord for THIS trial (for access to the trainingStepNum, etc)
% OUTPUTS
%   stimulus                this images stimManager object
%   updateSM                boolean flag indicating whether you've changed state (field values) in this object that you'd like to persist for future reference
%   resolutionIndex         index from the resolutions input that you want to set
%   out (non-phased)        monochrome stimulus frames.  logical, real (0<=x<=1) [double single], or [uint8 uint16].  2 or 3 dimensional array (y,x,frame)
%                           uint8 values will be mapped to 8-bit clut indices
%                           uint16 are converted to singles and treated as float
%                           float (double, single) values will be processed at 16 bits until finally rendered through a potentially higher dynamic range clut
%                           alternatively, this field can be a struct of parameters for expert mode PTB calls.
%   out (phased)            a struct that contains a cell array of stimSpecs (see below)
%   LUT                     the color look up (gamma/linearization) table to pass to the gfx card
%                           n X 3 array, 0<=x<=1, n is system dependent, but typically 256 (n=dacbits=log2(reallutsize) from screen('ReadNormalizedGammaTable'))
%                           on windows, table subject to unpublished constraints vaguely resembling monotonic increasing
%   scaleFactor (non-phased)    (potentially non-integer) factors by which to scale stim when mapping onto pixels
%                               [height width]>0, special case scalar zero means scale to full screen
%                               scaleFactor.*[y x] (dimensions of out array) must not exceed the resolution you specify
%   scaleFactor (phased)    this value is ignored because a phase-specific scaleFactor is defined in each stimSpec (see below)
%   type                    see below
%   targetPorts             vector subset of responsePorts that will count as correct responses 
%   distractorPorts         vector subset of responsePorts (disjoint with targetPorts) that will count as incorrect responses (remainder will be dead ports)
%                           if union(targetPorts distractorPorts) is empty, the trial ends when the stimulus ends, rather than waiting for a response
%                           for stimuli with no "end," union must not be empty, or there would be no way for the trial to end
%   details                 a structure of your design including parameters you choose in this method that will be saved with the trialRecord 
%   interTrialLuminance     a scalar value that matches type and scale of out
%                           full field luminance at this value will be shown until the first request
%                           also held after this trial ends until the beginning of the next trial
%                           if requestPorts (determined by the trialManager) is empty, the stimulus you provide (out) starts immediately
%                           NOTE: in phased case, this value is no longer drawn automatically at then end of a trial; you should
%                           make a "final" phase that holds this value as you need
%   text                    message to add to text label on each frame (can be single string or cell vector of length numFrames)
%
% values for 'type,' their semantics, and restrictions 
% note that these options grew organically as they were needed scientifically
% they are not intended to be an elegant covering of the space of possibilities
% if creative use of these does not meet your needs, implement a new type!
% 
% type='phased'             treat 'out' as an array of stimSpecs, and do not call the phaseify function
%
% %%% For all other types listed below, phaseify will be called to convert the non-phased calcStim output to a phased version,
%       according to trialManagerClass. phaseify() will automatically convert the non-phased output to a stimSpec, with the appropriate behavior for
%       nAFC and freeDrinks. for future stimulus managers, however, calcStim should return phased outputs instead of relying on this function. 
%
% type='static'             show one single frame
% 
% type='trigger'            show frame 1, except during requests, show frame 2
%	for nosepokes, requests are coextensive with beambreaks (for now, hardcode 'toggleStim' in stimOGL to false)
%	for lickometers, the request state toggles with each beambreak (hardcode 'toggleStim' in stimOGL to true)
%	future design: pass toggleStim in from calcStim
%	union(targetPorts distractorPorts) must not be empty
% 
% type='cache'              play through the frames in order, once
% 
% type='loop'               play through the frames in order, looping.
% 	union(targetPorts distractorPorts) must not be empty
% 
% type={'timedFrames' [frameTimes]}        show frames in order, each for the specified number of screen refreshes
%	frameTimes is: 
%       a vector of length equal to number of frames (size(stim,3)))
%       all integers > 0 representing the number or refreshes to display each frame
%       a zero in the final entry means hold display of last frame (in which case union(targetPorts distractorPorts) must not be empty)
% 
% type={'indexedFrames' [frameIndices]}     show frames in some order, useful if frames would otherwise be redundant
% 	loops over frameIndices vector until response (union(targetPorts distractorPorts) must not be empty)
%	frameIndices is:
%       a vector of frame indices
%       all integers btw 1 and the number of frames (size(stim,3)))
% 
% type='dynamic'            will call frames=stimManager.moreStim(usefulState) to request additional frames whenever it runs out
%   not yet implemented 
%
% type='expert'            will call stimManager.drawExpertFrame before each frame
%   your stimManager should override this method and call ptb drawing functions directly
%   leave frame text stamps, frameDropCorner, screen('drawingfinished'), and screen('flip') to stimOGL
%   this is an opportunity to use the imaging pipeline and shader programs for fast GPU-based stim computation, see ptb examples:
%       PsychDemos\ProceduralGaborDemo.m
%       PsychDemos\ProceduralGarboriumDemo.m
%       PsychDemos\ContrastModulatedNoiseTheElegantStyleDemo.m
%       PsychAlpha\FastSeparableFilteredNoiseDemo.m
%       PsychGLImageProcessing\FastFilteredNoiseDemo.m
%       PsychGLImageProcessing\NewFastFilteredNoiseDemo.m
%       PsychAlpha\ImageUndistortionDemo.m
%       PsychAlpha\ImageWarpingDemo.m
%   other uses: fast GPU-based rotation available in screen('drawtexture'), stimulus is too large to precache but fast enough to dynamically compute, alphablending, etc.
%   don't forget to call screen('close',[textureIDs]) on textures you create after no longer using them so you don't run out of VRAM (they will be automatically destroyed at the end of the trial)
%   INPUTS
%           stimManager         - your stimManager object
%           stim                - the stim returned by your calcStim
%           i                   - starts at 1, printed out on the frame lables as 'stimInd' and if textLabel is a cell, determines which is printed -- changing so that future values determined by returning updated value
%           phaseStartTime      - the GetSecs() timestamp at the beginning of this phase (will be AFTER the last VBL from the previous phase)
%           window              - the ptb window handle you should draw to
%           textLabel           - the text returned by your calcStim or previous calls to drawExpertFrame
%           floatprecision      - the precision associated with screen('maketexture') for the stim returned by calcStim for this phase (determined by determineColorPrecision)
%           destRect            - the destinationRect associated with screen('drawtexture') for this phase (determined by determineScreenParametersAndLUT) -- typically represents entire screen
%           filtMode            - the filterMode to pass to screen('drawtexture') (currently hardcoded in runRealTimeLoop)
%           expertCache         - you can stick stuff here and it will be passed back to you on future calls
%           ifi                 - the measured ifi in seconds
%           scheduledFrameNum   - the frame number that would be scheduled for this time, assuming no drops, with respect to the beginning of the phase (starts at 1).  takes ifi and framesPerUpdate, but not pauses, into account.
%           dropFrames          - if the trialManager was contructed with dropFrames set, you should draw the scheduledFrameNum rather than incrementally drawing the next frame (skipping frames that have been missed)
%   OUTPUTS 
%           doFramePulse        - whether flipFrameAndDoPulse should emit frame pulses (setting is sticky and overrides stimOGL's noPulses argument
%           expertCache         - you can stick stuff here and it will be passed back to you on future calls
%           dynamicDetails      - a structure of your design including parameters you choose in this method that will be saved with the trialRecord 
%           textLabel           - use this to override the text returned by your calcStim
%
%
% stimSpec objects
% out.stimSpecs is a cell array of stimSpec objects, each of which represents one phase of the trial
% 
% stimSpec.stimulus         the stimulus frames to show, or expert-mode parameters struct (equivalent to non-phased 'out')
% stimSpec.transitions      a cell array of the format {port1 target1 port2 target2 ...} where triggering port1 will cause a phase transition to 
%                           the phase specified by target1, triggering port2 will cause a phase transition to the phase specified by target2, etc.
%                           the port values are a subset of all ports and the target values are indices into the array of stimSpec objects.
%                           if the port value is empty ([]), then there is no phase transition by port triggering (instead, this is the special 'frame timeout' transition, see below)
%                           this 'frame timeout' transition is also used even if framesUntilTransition is empty, but if the stimType is 'cache'
%                           or 'timedFrames' with a nonzero end, and we finish showing the stimulus for the specified duration.
% stimSpec.stimType         must be one of the non-phased values for 'type' listed above, with the same properties
%                           this is effectively a phase-specific type, instead of trial-specific
% stimSpec.phaseType        one of {'correct', 'error', 'trigger', ''} -- correct and error will ask the reinforcement manager how much water/airpuff to deliver at the beginning of the phase
%                                   trigger will ask the reinforcement manager for this info after each new lick.
%                                   a reward that extends beyond the end of the phase is cut off.
% stimSpec.framesUntilTransition    length of the frame timeout (if we have shown this phase for framesUntilTransition frames with no transition by port selection,
%                                   then advance to the next phase as specified by the criterion automatically)
%                                   if framesUntilTransition is greater than the length of the stimulus and the stimType is 'cache' or
%                                   'timedFrames' with nonzero end, then we will throw an error during the validation process.                                  
%                                   advances to the special 'frame timeout' phase - see above
%                                   if empty, then hold this phase indefinitely until a port transition is triggered 
%                                   or we transition due to the strategy of 'cache' or 'timedFrames'.
% stimSpec.stochasticDistribution   a cell array of values {pA, portA, pB, portB,...} where pA specifies the probability of stochastically triggering
%                                   portA, and pB specifies the probability of triggering portB, etc
%                                   this is done for every frame of the stimulus (loop of runRealTimeLoop), and the execution order is whatever comes first
%                                   in this cell array (ie pA is tried, then pB, and so forth)
% stimSpec.scaleFactor      % the scaleFactor associated with this phase - see non-phased scaleFactor for details
% stimSpec.isFinalPhase     % a flag if this is the final phase of the trial (defaults to zero)
% stimSpec.startFrame       what frame of the stimulus to start this phase at; if 'loop' mode, automatically start at first frame after looping through once
%                           set to zero to start at the beginning

% for phased type, your stimManager may want to override the method getSoundsToPlay, which is called every frame.  the default will play trySomethingElse, keepGoing, correct and incorrect sounds appropriate for phaseified nAFC/freeDrinks.
% INPUTS
%   stimManager         your stimManager object
%   soundNames          the available soundNames
%   ports               the ports just triggered
%   phase               the stimSpec index 
%   stepsInPhase        the number of frame flips that have occured in this phase (starts at zero, equals the frame number if you haven't dropped any)
%   msRewardSound       the msRewardSound returned by the reinforcementManager
%   msPenaltySound      the msPenaltySound returned by the reinforcementManager
%   targetOptions       the target ports your calcStim returned
%   distractorOptions   the distractor ports your calcStim returned
%   requestOptions      the request ports your calcStim returned
%   trialManagerClass   the class of the trialManager
% OUTPUTS
%   soundsToPlay    a cell array of sound names in the form:  { {playLoop sounds}, {{playSound sound, playSound duration}, {playSound sound, playSound duration}, ...} }
%                   to loop a sound, include it in the playLoop list on every frame during which it should play
%                   to stop a looping sound, stop including it in the list
%                   a playSound that is longer than the phase is cut off at the end of the phase.